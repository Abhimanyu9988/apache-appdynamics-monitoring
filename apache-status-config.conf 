# Apache Status Configuration Sample
# Copy this configuration to enable Apache status monitoring
# 
# For Ubuntu/Debian:
#   1. Save as /etc/apache2/conf-available/apache-status.conf
#   2. Run: sudo a2enconf apache-status
#   3. Run: sudo systemctl reload apache2
#
# For RHEL/CentOS:
#   1. Add to /etc/httpd/conf/httpd.conf or create separate .conf file in conf.d/
#   2. Run: sudo systemctl reload httpd

<IfModule mod_status.c>
    # Enable extended status information
    ExtendedStatus On
    
    # Configure server-status endpoint
    <Location "/server-status">
        SetHandler server-status
        
        # Allow local access
        Require local
        Require ip 127.0.0.1
        Require ip ::1
        
        # Add your monitoring server IPs here
        # Replace with your actual monitoring server IP addresses
        Require ip 10.0.0.0/8          # Private Class A
        Require ip 172.16.0.0/12       # Private Class B
        Require ip 192.168.0.0/16      # Private Class C
        
        # Specific monitoring servers (examples - replace with your IPs)
        # Require ip 10.74.68.64       # Your monitoring server
        # Require ip 192.168.1.100     # Another monitoring server
        
        # Optional: Allow access from specific hostnames
        # Require host monitoring.yourcompany.com
        
        # Optional: Require authentication instead of IP restrictions
        # AuthType Basic
        # AuthName "Apache Status"
        # AuthUserFile /etc/apache2/.htpasswd
        # Require valid-user
    </Location>
    
    # Optional: Configure server-info endpoint (detailed server information)
    <Location "/server-info">
        SetHandler server-info
        
        # Same access restrictions as server-status
        Require local
        Require ip 127.0.0.1
        Require ip ::1
        Require ip 10.0.0.0/8
        Require ip 172.16.0.0/12
        Require ip 192.168.0.0/16
    </Location>
</IfModule>

# Security considerations:
# 1. Always restrict access to status pages - they can reveal sensitive information
# 2. Use specific IP addresses instead of broad network ranges when possible
# 3. Consider using HTTPS for status endpoints in production
# 4. Regularly review access logs for unauthorized access attempts
# 5. Consider authentication for additional security layer

# For HTTPS-only access, you can also configure:
# <VirtualHost *:443>
#     <Location "/server-status">
#         SetHandler server-status
#         Require ip your.monitoring.server.ip
#         SSLRequireSSL
#     </Location>
# </VirtualHost>

# Troubleshooting:
# - Test access: curl http://localhost/server-status
# - Test auto format: curl http://localhost/server-status?auto  
# - Check Apache error logs if getting 403/404 errors
# - Verify mod_status is loaded: apache2ctl -M | grep status